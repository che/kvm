#!/bin/bash
#
# Author: Pavel Chebotarev <che.pasha@gmail.com>
#

# Variables definition.
RES_CONF="/etc/resolv.conf"
VM_USER="$(whoami)"
VM_NAME="$VM_USER-"
VM_BIN_FILE="kvm"
VM_PID=""
RAM_SIZE_DEFAULT="2048"
RAM_SIZE_MAX="32768"
RAM_SIZE_MIN="64"
RAM_SIZE=""
IMG_DEFAULT="/root/ubuntu-server-10.04-64.img"
IMG_DIR=""
IMG_FILE=""
IMG=""
MAC_ADDR_STATUS=""
MAC_ADDR_STR=""
MAC_ADDR="00$(hexdump -n 5 -v -e '/1 ":%02X"' /dev/urandom)"
IP_ADDR=""
BR_IFACE_DEFAULT="br0"
BR_IFACE=""
BR_MAC=""
TAP_ID=""
CPU_CORES_DEFAULT="2"
CPU_CORES=""
CPU_MAX_DEFAULT="1"
CPU_MAX=""
DEV_MODEL="virtio"
UI_MODE=" -nographic"
GUEST_USER_DEFAULT="hh"
GUEST_USER=""
GUEST_SCRIPT=""
GUEST_SCRIPT_STATUS=""
GUEST_CLI="ssh -t"
GUEST_HOST_NAME_DEFAULT="dev"
GUEST_HOST_NAME=""
GUEST_DOMAIN_NAME=""
UNKNOW=="unknow"
SCAN_UTIL="arp-scan"
DOMAIN_NAME=""

REG_IP_ADDR="^((([0-9]|[1-9][0-9])|(([1][0-9][0-9])|(([2][0-4][0-9])|([2][5][0-4]))))[.]){3}(([0-9]|[1-9][0-9])|(([1][0-9][0-9])|(([2][0-4][0-9])|([2][5][0-4]))))$"
REG_MAC_ADDR="^[0-9A-Fa-f][0-9A-Fa-f][:][0-9A-Fa-f][0-9A-Fa-f][:][0-9A-Fa-f][0-9A-Fa-f][:][0-9A-Fa-f][0-9A-Fa-f][:][0-9A-Fa-f][0-9A-Fa-f][:][0-9A-Fa-f][0-9A-Fa-f]$"
REG_RAM_SIZE="^[0-9][0-9][0-9]?[0-9]?[0-9]?$"
REG_BR_IFACE="^[b][r][0-9][0-9]?$"
REG_CPU="^[1-9][:][1-9]$"
REG_GUEST_USER="^[0-9A-Za-z\_\-\.\:]+$"
REG_GUEST_HOST_NAME="^[0-9A-Za-z][0-9A-Za-z\-]+$"
REG_GUEST_DOMAIN_NAME="^([a-z0-9-]+(\.[a-z0-9-]+)*?\.[a-z]{2,6}|(\d{1,3}\.){3}\d{1,3})(:\d{4})?$"
REG_ADDR="^[a][d][d][r][:]"

# Print error message and exit.
function error_msg()
{
	echo "Error: $1"
	exit 1
}

# Checking file KVM image.
function check_img()
{
	if [ -z "$IMG" ]; then
		error_msg "File KVM image not has been defined"
	fi
	if [ "$IMG" == "$IMG_DEFAULT" ]; then
		IMG_DIR="$(dirname "$IMG")/"
	else
		IMG_DIR="$(cd $(dirname "$IMG") && pwd)/"
	fi
	IMG_FILE="$(basename "$IMG")"
	if [ ! -f "$IMG_DIR$IMG_FILE" ]; then
		error_msg "No such file '$IMG_DIR$IMG_FILE'"
	fi
}

# Definition MAC address.
function def_mac_addr()
{
	MAC_ADDR="$(echo "$MAC_ADDR" | tr 'a' 'A' | tr 'b' 'B' | tr 'c' 'C' | tr 'd' 'D' | tr 'e' 'E' | tr 'f' 'F')"
	MAC_ADDR_="$(echo "$MAC_ADDR" | tr 'A' 'a' | tr 'B' 'b' | tr 'C' 'c' | tr 'D' 'd' | tr 'E' 'e' | tr 'F' 'f')"
}

# Runing script on guest machene after start up.
function default_post_script()
{
	cat <<D_E_F_A_U_L_T__P_O_S_T__S_C_R_I_P_T
# Change local DNS.
VM_DOMAIN_NAME="$GUEST_DOMAIN_NAME"
VM_HOST_NAME="$GUEST_HOST_NAME"
VM_HOST_LH="127.0.0.1"
VM_HOST_IP="$IP_ADDR"
RES_CONF="$RES_CONF"
HOSTS_CONF="/etc/hosts"
HOSTS_T_CONF="\$HOSTS_CONF.tmp"
DNS_CONF="/etc/dnsmasq.conf"
DNS_RES_CONF="\$(echo "\$DNS_CONF" | cut -d\. -f1).\$(echo "\$RES_CONF" | cut -d\/ -f3)"
DNS_D_CONF="\$(echo "\$DNS_CONF" | cut -d\. -f1).d/\$VM_HOST_NAME.\$VM_DOMAIN_NAME"
DNS_CONF_STR="resolv-file="
REG_DNS_CONF_STR="^[r][e][s][o][l][v][-][f][i][l][e][=]"

if [ -f "\$RES_CONF" ]; then
	if [ -f "\$DNS_CONF" ]; then
		if [ ! -x "\$DNS_D_CONF" ]; then
			sudo touch "\$DNS_D_CONF"
		fi
		echo -n "address=/\$VM_HOST_NAME.\$VM_DOMAIN_NAME/\$VM_HOST_IP" | sudo tee "\$DNS_D_CONF" >/dev/null
		sudo cp -f "\$RES_CONF" "\$DNS_RES_CONF" >/dev/null
		if [ "\$?" == "0" ]; then
			sudo cat "\$DNS_CONF" | grep "\$DNS_CONF_STR\$DNS_RES_CONF" >/dev/null
			if [ "\$?" != "0" ]; then
				sudo cat "\$DNS_CONF" | grep -E "\$REG_DNS_CONF_STR" >/dev/null
				if [ "\$?" == "0" ]; then
					sudo sed -i "s#\(\#\$DNS_CONF_STR\).*#\1\$DNS_RES_CONF#g" "\$DNS_CONF" >/dev/null
				else
					sudo sed -i "s#\(\#\$DNS_CONF_STR\).*#\1\n\$DNS_CONF_STR\$DNS_RES_CONF#g" "\$DNS_CONF" >/dev/null
				fi
			fi
			sudo sed -i "s#\(nameserver\).*#\1 \$VM_HOST_LH#g" "\$RES_CONF" >/dev/null
		fi
		if [ ! -x "\$HOSTS_T_CONF" ]; then
			sudo touch "\$HOSTS_T_CONF"
		fi
		cat "\$HOSTS_CONF" | while read line; do
			echo "\$line" | grep -E "^[#]" >/dev/null
			if [ "\$?" == "0" ]; then
				echo "\$line" | sudo tee "\$HOSTS_T_CONF" >/dev/null
			else
				(echo "\$line" | grep -w "\$VM_HOST_NAME" >/dev/null || echo "\$line" | grep -w "\$VM_HOST_NAME.\$VM_DOMAIN_NAME" >/dev/null)
				if [ "\$?" == "0" ]; then
					echo "#\$line" | sudo tee "\$HOSTS_T_CONF" >/dev/null
				else
					echo "\$line" | sudo tee "\$HOSTS_T_CONF" >/dev/null
				fi
			fi
		done
		sudo mv -f "\$HOSTS_T_CONF" "\$HOSTS_CONF"
		sudo "/etc/init.d/\$(echo "\$DNS_CONF" | cut -d\/ -f3 | cut -d\. -f1)" restart
	fi
	sudo nisdomainname "\$VM_DOMAIN_NAME" >/dev/null
	sudo hostname "\$VM_HOST_NAME" >/dev/null
fi
D_E_F_A_U_L_T__P_O_S_T__S_C_R_I_P_T
}

# Help message.
function help()
{
	cat <<H_E_L_P

Usage: $(basename $0) [options]

Options:
    -i, --kvm-image          Set file KVM VM image
                             (by default $IMG_DEFAULT).
    -r, --ram-size           Set RAM size(M)(by default $RAM_SIZE_DEFAULT).
                             Size: min=$RAM_SIZE_MIN and max=$RAM_SIZE_MAX.
    -m, --mac-address        Set MAC address(by default generated).
    -M, --no-mac-address     Not use MAC address at startup.
    -b, --bridge-interface   Set bridge interface(by default $BR_IFACE_DEFAULT).
    -c, --cpu                Set CPU cores and max using. Format: cores:maxcpu.
    -g, --graphic            Set GUI mode(by default text mode).
    -u, --guest-user         Set user name for script running on guest machine
                             (by default $GUEST_USER_DEFAULT).
    -s, --guest-script-file  Runnig script on guest machine after start up
                             (by default will be generated - not empty).
    -S, --no-guest-script    Not runnig script on guest machene after start up.
    -n, --guest-host-name    Set host name of guest machine
                             (by default $GUEST_HOST_NAME_DEFAULT).
    -d, --guest-domain-name  Set domain name of guest machine
                             (by default host domain name).
    -v, --version            Print the current version.
    -h, --help               Show this message.

Note:
    You have to make file '/etc/udev/rules.d/70-persistent-net.rules' empty
    if you run the tighter guest Linux VM with a different MAC address.

H_E_L_P
}

# Difinition default MAC address.
def_mac_addr

# Difinition host domain name.
DOMAIN_NAME="$(domainname 2>/dev/null)"
if !([ "$?" == "0" ] && [ "$DOMAIN_NAME" != "(none)" ]); then
	DOMAIN_NAME=""
fi
if [ -z "$DOMAIN_NAME" ]; then
	DOMAIN_NAME="$(dnsdomainname 2>/dev/null)"
fi
if [ -z "$DOMAIN_NAME" ]; then
	DOMAIN_NAME="$(nisdomainname 2>/dev/null)"
	if [ "$?" != "0" ]; then
		DOMAIN_NAME=""
	fi
fi
if [ -z "$DOMAIN_NAME" ]; then
	DOMAIN_NAME="$(ypdomainname 2>/dev/null)"
	if [ "$?" != "0" ]; then
		DOMAIN_NAME=""
	fi
fi
if [ -z "$DOMAIN_NAME" ]; then
	DOMAIN_NAME="$(hostname --domain 2>/dev/null)"
fi
if [ -z "$DOMAIN_NAME" ]; then
	DOMAIN_NAME="$(cat "$RES_CONF" | grep "domain" | cut -d\  -f2 2>/dev/null)"
fi
if [ -z "$DOMAIN_NAME" ]; then
	DOMAIN_NAME="$(cat "$RES_CONF" | grep "search" | cut -d\  -f2 2>/dev/null)"
fi
if [ -z "$DOMAIN_NAME" ]; then
	DOMAIN_NAME="local"
fi

# Options definition.
OPTS="$(getopt -o "i:r:m:Mb:c:gu:s:Sn:d:vh" -l "kvm-image:,ram-size:,mac-address:,no-mac-address,bridge-interface:,cpu:,graphic,guest-user:,guest-script-file:,no-guest-script,guest-host-name:,guest-domain-name:,version,help" -a -- "$@" 2>/dev/null)"
if [ "$?" != "0" ]; then
	help
	error_msg "Bad option(s) value"
fi
eval set -- "$OPTS"

# Options parsing.
while [ $# -gt 0 ]; do
	case $1 in
	-- )
		shift
	;;
	-i|--kvm-image )
		IMG="$2"
		check_img
		shift 2
	;;
	-r|--ram-size )
		echo "$2" | grep -E "$REG_RAM_SIZE" >/dev/null
		if [ "$?" == "0" ] && [ $2 -ge $RAM_SIZE_MIN ] && [ $2 -le $RAM_SIZE_MAX ]; then
			RAM_SIZE="$2"
		else
			error_msg "Incorrectly RAM size '$2'"
		fi
		shift 2
	;;
	-m|--mac-address )
		echo "$2" | grep -E "$REG_MAC_ADDR" >/dev/null
		if [ "$?" == "0" ]; then
			MAC_ADDR="$2"
		else
			error_msg "Incorrectly MAC address '$2'"
		fi
		shift 2
	;;
	-M|--no-mac-address )
		MAC_ADDR_STATUS="no"
		shift
	;;
	-b|--bridge-interface )
		echo "$2" | grep -E "$REG_BR_IFACE" >/dev/null
		if [ "$?" == "0" ]; then
			BR_IFACE="$2"
		else
			error_msg "Incorrectly bridge interface '$2'"
		fi
		shift 2
	;;
	-c|--cpu )
		echo "$2" | grep -E "$REG_CPU" >/dev/null
		if [ "$?" == "0" ]; then
			CPU_CORES="$(echo "$2" | cut -d\: -f1)"
			CPU_MAX="$(echo "$2" | cut -d\: -f2)"
		else
			error_msg "Incorrectly 'cores:maxcpu' values '$2'"
		fi
		if [ $CPU_MAX -gt $CPU_CORES ]; then
			error_msg "Cores values must be more or equal maxcpu value"
		fi
		shift 2
	;;
	-g|--graphic )
		UI_MODE=""
		shift
	;;
	-u|--guest-user )
		echo "$2" | grep -E "$REG_GUEST_USER" >/dev/null
		if [ "$?" == "0" ]; then
			GUEST_USER="$2"
		else
			error_msg "Guest user name value is incorrectly '$2'"
		fi
		shift 2
	;;
	-s|--guest-script-file )
		if [ -x "$2" ] && [ -f "$2" ]; then
			GUEST_SCRIPT="$(cat "$2")"
		else
			error_msg "No such file '$2'"
		fi
		shift 2
	;;
	-S|--no-guest-script )
		GUEST_SCRIPT_STATUS="no"
		shift
	;;
	-n|--guest-host-name )
		echo "$2" | grep -E "$REG_GUEST_HOST_NAME" >/dev/null
		if [ "$?" == "0" ]; then
			GUEST_HOST_NAME="$2"
		else
			error_msg "Guest host name value is incorrectly '$2'"
		fi
		shift 2
	;;
	-d|--guest-domain-name )
		echo "$2" | grep -E "$REG_GUEST_DOMAIN_NAME" >/dev/null
		if [ "$?" == "0" ]; then
			GUEST_DOMAIN_NAME="$2"
		else
			error_msg "Guest domain name value is incorrectly '$2'"
		fi
		shift 2
	;;
	-v|--version )
		echo "Version: 1.5.7"
		exit 0
	;;
	-h|--help )
		help
		exit 0
	;;
	* )
		help
		error_msg "Bad option(s)"
	;;
	esac
done

# Guest user checking.
if [ -z "$GUEST_USER" ]; then
	GUEST_USER=$GUEST_USER_DEFAULT
fi

# Guest host name checking.
if [ -z "$GUEST_HOST_NAME" ]; then
	GUEST_HOST_NAME=$GUEST_HOST_NAME_DEFAULT
fi

# Guest domain name checking.
if [ -z "$GUEST_DOMAIN_NAME" ]; then
	GUEST_DOMAIN_NAME=$DOMAIN_NAME
fi

# Guest script checking.
if [ -z "$GUEST_SCRIPT_STATUS" ]; then
	# Guest client(ssh) checking.
	$GUEST_CLI -V 2>/dev/null
	if [ "$?" != "0" ]; then
		error_msg "You must install '$(echo "$GUEST_CLI" | cut -d\  -f1)' utility program(package)"
	fi
fi

# IMG value checking.
if [ -z "$IMG" ]; then
	IMG=$IMG_DEFAULT
	check_img
fi

# RAM_SIZE value checking.
if [ -z "$RAM_SIZE" ]; then
	RAM_SIZE=$RAM_SIZE_DEFAULT
fi

# CPU values checking.
if [ -z "$CPU_CORES" ]; then
	CPU_CORES=$CPU_CORES_DEFAULT
fi
if [ -z "$CPU_MAX" ]; then
	CPU_MAX=$CPU_MAX_DEFAULT
fi

# MAC_ADDR value checking.
if [ -z "$MAC_ADDR_STATUS" ]; then
	def_mac_addr
	MAC_ADDR_STR=",macaddr=$MAC_ADDR"
else
	MAC_ADDR="$UNKNOW"
	IP_ADDR="$UNKNOW"
	MAC_ADDR_STR=""
fi

# Definition full VM name.
VM_NAME="$VM_NAME$(echo "$MAC_ADDR_" | sed "s/\://g")"

# BR_IFACE value checking.
if [ -z "$BR_IFACE" ]; then
	BR_IFACE=$BR_IFACE_DEFAULT
fi

# Set TAP interface.
for t in $(seq 0 127); do
	MSG="$(sudo tunctl -u $VM_USER -t tap$t 2>/dev/null)"
	if [ "$?" == "0" ]; then
		sudo ip link set tap$t up
		sudo brctl addif $BR_IFACE tap$t 2>/dev/null
		TAP_ID=$t
		break
	fi
done
if [ -z "$TAP_ID" ]; then
	error_msg "Could not set 'tap'"
fi

# KVM running.
$VM_BIN_FILE "${IMG_DIR}${IMG_FILE}" \
	-name "$VM_NAME" \
	-m "$RAM_SIZE" \
	-smp ${CPU_MAX},cores=${CPU_CORES},maxcpus=$CPU_MAX \
	-drive cache=writeback,if=$DEV_MODEL \
	-net nic,model=${DEV_MODEL},vlan=0$MAC_ADDR_STR \
	-net tap,vlan=0,ifname=tap${TAP_ID},script=no,downscript=no \
	-localtime$UI_MODE &

# Definition VM PID.
VM_PID="$(ps ax | grep "$VM_BIN_FILE" | grep "$VM_NAME" | cut -d\  -f1)"
if [ -z "$VM_PID" ]; then
	VM_PID="$UNKNOW"
fi

# Print basic information about the running VM.
echo ""
echo "KVM:"
echo "  Image:"
echo "    Directory: $IMG_DIR"
echo "    File: $IMG_FILE"
echo "  Name:"
echo "    User: $VM_USER"
echo "    Domain: $DOMAIN_NAME"
echo "    Host: $(hostname)"
echo "    Machine: $VM_NAME"
echo "  PID: $VM_PID"
echo "  CPU:"
echo "    Cores: $CPU_CORES"
echo "    Max: $CPU_MAX"
echo "  RAM size: ${RAM_SIZE}M"
echo "  Interface:"
echo "    Bridge: $BR_IFACE"
echo "    TAP: tap$TAP_ID"
echo "  Address:"
echo "    MAC: $MAC_ADDR"

# IP address definition if MAC address has been defined.
if [ "$MAC_ADDR" != "$IP_ADDR" ]; then
	for i in $(sudo ifconfig "$BR_IFACE"); do
		echo "$i" | grep -E "$REG_ADDR" >/dev/null
		if [ "$?" == "0" ]; then
			IP_NET="$(echo "$i" | cut -d\: -f2 | cut -d\. -f-3).0"
			break
		fi
	done
	echo "$IP_NET" | grep -E "$REG_IP_ADDR" >/dev/null
	if [ "$?" == "0" ]; then
		sleep 2
		T_STR=""
		for s in $(seq 1 60); do
			for i in $(sudo $SCAN_UTIL --interface "$BR_IFACE" "${IP_NET}/24" 2>/dev/null); do
				if [ "$MAC_ADDR_" == "$i" ]; then
					IP_ADDR=$T_STR
				fi
				T_STR="$i"
			done
			if [ ! -z "$IP_ADDR" ]; then
				break
			fi
			sleep 1
		done
		if [ -z "$IP_ADDR" ]; then
			IP_ADDR=$UNKNOW
		fi
	else
		IP_ADDR=$UNKNOW
	fi
fi

# Print IP address.
echo "    IP: $IP_ADDR"

# Guest values connection.
echo "  Guest:"
echo "    Name:"
echo "      User: $GUEST_USER"
echo "      Domain: $GUEST_DOMAIN_NAME"
echo "      Host: $GUEST_HOST_NAME"

# Guest script running.
if [ -z "$GUEST_SCRIPT_STATUS" ] && [ ! -z "$GUEST_USER" ] && [ "$IP_ADDR" != "$UNKNOW" ]; then
	if [ -z "$GUEST_SCRIPT" ]; then
		GUEST_SCRIPT="$(default_post_script)"
	fi
	sleep 2
	$GUEST_CLI "${GUEST_USER}@${IP_ADDR}" "$GUEST_SCRIPT"
fi

# Print guest script status.
echo "    Script status: $?"

# Print basic information about the running VM(ending).
echo ""

exit $?
