#!/usr/bin/env bash
#
# Author: Pavel Chebotarev <che.pasha@gmail.com>
#

# Variables definition.
IMG_USER="$(whoami)"
DIR="kvm/"
IMG_DIR_DEFAULT="/root/${DIR}"
IMG_DIR=""
IMG_FILE_DEFAULT="ubuntu-server-10.04-64.img"
IMG_FILE=""
USER_DIR_DEFAULT="/$IMG_USER/$DIR"
if [ "$IMG_USER" != "root" ]; then
	USER_DIR_DEFAULT="/home$USER_DIR_DEFAULT"
fi
USER_DIR=""
USER_FILE_DEFAULT="$IMG_FILE_DEFAULT"
USER_FILE=""
FORCE="--force "

REG_SEPARATOR="[\/]"

# Print error message and exit.
function error_msg()
{
	echo "Error: $1"
	exit 1
}

# Image directory and file checking.
function check_img()
{
	echo "$1" | grep -E "$REG_SEPARATOR" >/dev/null
	STAT="$?"
	sudo stat "$IMG_DIR_DEFAULT$1" 2>/dev/null | grep "Size:" | grep "file" >/dev/null
	if [ "$?" == "0" ] && [ "$STAT" != "0" ]; then
		IMG_DIR="$IMG_DIR_DEFAULT"
		IMG_FILE="$1"
	else
		STAT="$(sudo stat "$1" 2>/dev/null | grep "Size:")"
		if [ "$?" == "0" ]; then
			echo "$STAT" | grep "directory" >/dev/null
			if [ "$?" == "0" ]; then
				IMG_DIR="$(sudo bash -c "cd \"$1\" && pwd" 2>/dev/null)/"
				IMG_FILE="$IMG_FILE_DEFAULT"
			else
				echo "$STAT" | grep "file" >/dev/null
				if [ "$?" == "0" ]; then
					IMG_DIR="$(dirname "$1")"
					IMG_DIR="$(sudo bash -c "cd \"$IMG_DIR\" && pwd" 2>/dev/null)/"
					IMG_FILE="$(basename "$1")"
				else
					error_msg "No such file '$1'"
				fi
			fi
		else
			error_msg "No such file or directory '$1'"
		fi
	fi
	STAT=""
}

# Help message definition.
function help()
{
	cat <<H_E_L_P

Usage: $(basename $0) [options]

Options:
    -s, --source       Set source directory or file
                       (by default directory $IMG_DIR_DEFAULT
                       and file $IMG_FILE_DEFAULT).
    -d, --destination  Set destination directory or file
                       (by default directory $USER_DIR_DEFAULT
                       and file $USER_FILE_DEFAULT).
    -F, --not-force    Set not force coping.
    -v, --version      Print the current version.
    -h, --help         Show this message.

H_E_L_P
}

# Options definition.
OPTS="$(getopt -o "s:d:Fvh" -l "source:,destination:,not-force,version,help" -a -- "$@" 2>/dev/null)"
if [ "$?" != "0" ]; then
	help
	error_msg "Bad option(s) value"
fi
eval set -- "$OPTS"

# Options parsing.
while [ $# -gt 0 ]; do
	case $1 in
	-- )
		shift
	;;
	-s|--source )
		check_img "$2"
		shift 2
	;;
	-d|--destination )
		sudo stat "$2" 2>/dev/null | grep "Size:" | grep "directory" >/dev/null
		if [ "$?" == "0" ]; then
			USER_DIR="$(sudo bash -c "cd \"$2\" && pwd" 2>/dev/null)/"
			USER_FILE="$IMG_FILE_DEFAULT"
		else
			echo "$2" | grep -E "$REG_SEPARATOR" >/dev/null
			if [ "$?" != "0" ]; then
				USER_DIR="$USER_DIR_DEFAULT"
				USER_FILE="$2"
			else
				USER_DIR="$(dirname "$2")/"
				USER_FILE="$(basename "$2")"
			fi
		fi
		shift 2
	;;
	-F|--not-force )
		FORCE=""
		shift
	;;
	-v|--version )
		echo "Version: 1.0.6"
		exit 0
	;;
	-h|--help )
		help
		exit 0
	;;
	* )
		help
		error_msg "Bad option(s)"
	;;
	esac
done

# Image directory and file values checking.
if [ -z "$IMG_DIR" ] || [ -z "$IMG_FILE" ]; then
	if [ -z "$IMG_DIR" ]; then
		IMG_DIR="$IMG_DIR_DEFAULT"
	fi
	if [ -z "$IMG_FILE" ]; then
		IMG_FILE="$IMG_FILE_DEFAULT"
	fi
	check_img "$IMG_DIR$IMG_FILE"
fi

# User image directory checking.
if [ -z "$USER_DIR" ]; then
	USER_DIR="$USER_DIR_DEFAULT"
fi

# User image file checking.
if [ -z "$USER_FILE" ]; then
	USER_FILE="$USER_FILE_DEFAULT"
fi

# Print basic information coping.
echo ""
echo "KVM:"
echo "    User: $IMG_USER"
echo "    Source:"
echo "        Directory: $IMG_DIR"
echo "        File: $IMG_FILE"
echo "    Destination:"
echo "        Directory: $USER_DIR"
echo "        File: $USER_FILE"
echo ""

# 'Source' value and 'destination' value comparing.
if [ "$IMG_DIR$IMG_FILE" == "$USER_DIR$USER_FILE" ]; then
	error_msg "'Source' value and 'destination' value are equal"
fi

# User directory making and permission setting.
if [ ! -x "$USER_DIR" ]; then
	mkdir -p "$USER_DIR"
	if [ "$?" == "0" ]; then
		chown -R "$USER" "$USER_DIR" && chmod -R 755 "$USER_DIR"
		if [ "$?" != "0" ]; then
			error_msg "Can not set permission for directory '$USER_DIR'"
		fi
	else
		error_msg "Can not create directory '$USER_DIR'"
	fi
fi

# Coping.
sudo cp $FORCE"$IMG_DIR$IMG_FILE" "$USER_DIR$USER_FILE"
if [ "$?" == "0" ]; then
	sudo chown "$USER" "$USER_DIR$USER_FILE" && chmod 644 "$USER_DIR$USER_FILE"
	if [ "$?" != "0" ]; then
		error_msg "Can not set permission for file '$USER_DIR$USER_FILE'"
	fi
fi

exit $?
